{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\massa\\\\OneDrive\\\\Desktop\\\\Coding\\\\Whats-Your-Deal\\\\src\\\\components\\\\StockBar\\\\stockbar.jsx\";\nimport React from 'react';\nimport \"./sass/stockbar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Stockbar() {\n  // Declare constants-- touch marquee element\n  const marqueeElement = document.getElementById(`marqueeTest`); // Fetch with async function\n\n  async function stockListFetch() {\n    const response = await fetch(`https://financialmodelingprep.com/api/v3/available-traded/list?apikey=7e60778244bbb11a3e59192e565ed625`);\n    let stocklist = await response.json(); // Splice array for workable number\n\n    stocklist.splice(100); // For each company make a div add a class\n\n    stocklist.forEach((company, index, stockElement) => {\n      let profileURL = `https://stock-exchange-dot-full-stack-course-services.ew.r.appspot.com/api/v3/company/profile/${company.symbol}`;\n      fetch(profileURL).then(newResponse => newResponse.json()).then(profileData => {\n        // Reinitializing Profile Array\n        profilesArray.push(profileData);\n        console.log(profilesArray);\n        profilesArray.forEach((company, index) => {\n          // Begin Profiles Array // Search Results Function\n          let plus = ``;\n          let condition = ``;\n          let symbol = company.symbol;\n          let image = company.profile.image;\n          let changes = company.profile.changes.toFixed(2);\n          let name = company.profile.companyName; // Filtering for Price Increase or Decrease\n\n          if (changes >= 0) {\n            condition = `positive`;\n            plus = `+`;\n          } else {\n            condition = `negative`;\n          } // Creating Rows for Each Company\n\n\n          companyRow = document.createElement(`div`);\n          let companyImage = document.createElement(`img`); // Creating Image for Each Company\n          // Setting the Attributes of the Company Image\n\n          companyImage.setAttribute(`src`, image);\n          companyImage.setAttribute(`class`, `companyIcon`);\n          companyImage.setAttribute(`height`, `100px`);\n          companyImage.setAttribute(`width`, `100px`); // Setting the Attributes of the Company Rows\n\n          companyRow.classList.add(`companyRow`); // Creating a New Element to Contain Company Data\n\n          let companyElement = document.createElement(`a`);\n          companyElement.setAttribute(`href`, `./html/company.html?symbol=${symbol}`);\n          companyElement.classList.add(`çompanyElement`);\n          companyElement.setAttribute(`ìd`, index + 1);\n          companyElement.innerHTML = `\n                    <span class=\"companyName\">${name}</span> \n                    <span class=\"companySymbol\">(${symbol})</span>\n                    <span class=\"companyChanges ${condition}\">(${plus}${changes})</span>\n                    `; // Injecting the Elements we Created into the Rows\n\n          companyRow.prepend(companyImage);\n          companyRow.append(companyElement); // Returning the Company Row\n\n          return companyRow; // End Search Results Function\n        }); // Abstracted this code so it only appends rows on full word input\n\n        results.append(companyRow); // Image Fixing\n\n        const images = document.querySelectorAll(`img`);\n        images.forEach(image => {\n          image.addEventListener(`error`, event => {\n            event.target.src = `../img/Stock-Icon-Circle-Icon.svg`;\n          });\n        }); // Highlighting Searched Text on Company Names\n\n        const companyNames = document.querySelectorAll(`.companyName`);\n        companyNames.forEach(name => {\n          let filteredCharacters = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n          let filter = new RegExp(`${filteredCharacters}`, `gi`);\n          name.innerHTML = name.textContent.replace(filter, match => `<mark>${match}</mark>`);\n        }); // Highlighting Searched Text on Company Symbols\n\n        const companySymbols = document.querySelectorAll(`.companySymbol`);\n        companySymbols.forEach(symbol => {\n          let filteredCharacters = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n          let filter = new RegExp(`${filteredCharacters}`, `gi`);\n          symbol.innerHTML = symbol.textContent.replace(filter, match => `<mark>${match}</mark>`);\n        });\n      });\n      stockElement = document.createElement(`div`);\n      stockElement.classList.add(`stockElement`); // Add symbol with a price\n\n      let companyElement = document.createElement(`a`);\n      let companyImage = document.createElement(`img`); // Creating Image for Each Company\n      // Setting the Attributes of the Company Image\n\n      companyImage.setAttribute(`src`, company);\n      companyImage.setAttribute(`class`, `companyIcon`);\n      companyImage.setAttribute(`height`, `100px`);\n      companyImage.setAttribute(`width`, `100px`);\n      companyElement.setAttribute(`href`, `./html/company.html?symbol=${company.symbol}`);\n      companyElement.classList.add(`companyElement`);\n      companyElement.setAttribute(`ìd`, index + 1);\n      stockElement.innerHTML = `${company.symbol} <span class=\"positive\"> | ($${company.price})</span>`;\n      marqueeElement.classList.add(`marqueeAnim`);\n      companyElement.append(stockElement);\n      marqueeElement.append(companyElement);\n    });\n  }\n\n  stockListFetch();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"outerMarquee marqueeAnim\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"newTesting\",\n      id: \"marqueeTest\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Stockbar;\nexport default Stockbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stockbar\");","map":{"version":3,"sources":["C:/Users/massa/OneDrive/Desktop/Coding/Whats-Your-Deal/src/components/StockBar/stockbar.jsx"],"names":["React","Stockbar","marqueeElement","document","getElementById","stockListFetch","response","fetch","stocklist","json","splice","forEach","company","index","stockElement","profileURL","symbol","then","newResponse","profileData","profilesArray","push","console","log","plus","condition","image","profile","changes","toFixed","name","companyName","companyRow","createElement","companyImage","setAttribute","classList","add","companyElement","innerHTML","prepend","append","results","images","querySelectorAll","addEventListener","event","target","src","companyNames","filteredCharacters","searchTerm","replace","filter","RegExp","textContent","match","companySymbols","price"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport \"./sass/stockbar.css\";\r\n\r\nfunction Stockbar() {\r\n\r\n    // Declare constants-- touch marquee element\r\n    const marqueeElement = document.getElementById(`marqueeTest`);\r\n\r\n    // Fetch with async function\r\n    async function stockListFetch() {\r\n    const response = await fetch(\r\n        `https://financialmodelingprep.com/api/v3/available-traded/list?apikey=7e60778244bbb11a3e59192e565ed625`\r\n    );\r\n    let stocklist = await response.json();\r\n    // Splice array for workable number\r\n    stocklist.splice(100);\r\n\r\n    // For each company make a div add a class\r\n    stocklist.forEach((company, index, stockElement) => {\r\n        let profileURL = `https://stock-exchange-dot-full-stack-course-services.ew.r.appspot.com/api/v3/company/profile/${company.symbol}`;\r\n        fetch(profileURL)\r\n                .then((newResponse) => newResponse.json())\r\n                .then((profileData) => {\r\n\r\n                // Reinitializing Profile Array\r\n                profilesArray.push(profileData);\r\n                console.log(profilesArray)\r\n                profilesArray.forEach((company, index) => {\r\n\r\n                  // Begin Profiles Array // Search Results Function\r\n                    let plus = ``;\r\n                    let condition = ``;\r\n                    let symbol = company.symbol;\r\n                    let image = company.profile.image;\r\n                    let changes = company.profile.changes.toFixed(2);\r\n                    let name = company.profile.companyName;\r\n\r\n                    // Filtering for Price Increase or Decrease\r\n                    if (changes >= 0) {\r\n                      condition = `positive`;\r\n                      plus = `+`;\r\n                     }  else {\r\n                      condition = `negative`;\r\n                    }\r\n                \r\n                    // Creating Rows for Each Company\r\n                    companyRow = document.createElement(`div`);\r\n                    let companyImage = document.createElement(`img`); // Creating Image for Each Company\r\n        \r\n                    // Setting the Attributes of the Company Image\r\n                    companyImage.setAttribute(`src`, image);\r\n                    companyImage.setAttribute(`class`, `companyIcon`);\r\n                    companyImage.setAttribute(`height`, `100px`);\r\n                    companyImage.setAttribute(`width`, `100px`);\r\n\r\n                    // Setting the Attributes of the Company Rows\r\n                    companyRow.classList.add(`companyRow`);\r\n\r\n                    // Creating a New Element to Contain Company Data\r\n                    let companyElement = document.createElement(`a`);\r\n                    companyElement.setAttribute(`href`,`./html/company.html?symbol=${symbol}`);\r\n                    companyElement.classList.add(`çompanyElement`);\r\n                    companyElement.setAttribute(`ìd`, index + 1);\r\n                    companyElement.innerHTML = `\r\n                    <span class=\"companyName\">${name}</span> \r\n                    <span class=\"companySymbol\">(${symbol})</span>\r\n                    <span class=\"companyChanges ${condition}\">(${plus}${changes})</span>\r\n                    `; // Injecting the Elements we Created into the Rows\r\n                    companyRow.prepend(companyImage);\r\n                    companyRow.append(companyElement);\r\n\r\n                    // Returning the Company Row\r\n                    return companyRow;\r\n                    // End Search Results Function\r\n                  });\r\n\r\n                  // Abstracted this code so it only appends rows on full word input\r\n                  results.append(companyRow);\r\n\r\n                  // Image Fixing\r\n                  const images = document.querySelectorAll(`img`);\r\n                  images.forEach(image => {\r\n                    image.addEventListener(`error`,event => {\r\n                      event.target.src=`../img/Stock-Icon-Circle-Icon.svg`;\r\n                    })\r\n                  })\r\n\r\n                  // Highlighting Searched Text on Company Names\r\n                  const companyNames = document.querySelectorAll(`.companyName`);\r\n                  companyNames.forEach(name => {\r\n                    let filteredCharacters = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\");\r\n                    let filter = new RegExp(`${filteredCharacters}`,`gi`);\r\n                    name.innerHTML = name.textContent.replace(filter,match => `<mark>${match}</mark>`);\r\n                  })\r\n\r\n                  // Highlighting Searched Text on Company Symbols\r\n                  const companySymbols = document.querySelectorAll(`.companySymbol`);\r\n                  companySymbols.forEach(symbol => {\r\n                    let filteredCharacters = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\");\r\n                    let filter = new RegExp(`${filteredCharacters}`,`gi`);\r\n                    symbol.innerHTML = symbol.textContent.replace(filter,match => `<mark>${match}</mark>`);\r\n                  })\r\n\r\n              });\r\n        stockElement = document.createElement(`div`);\r\n        stockElement.classList.add(`stockElement`);\r\n        // Add symbol with a price\r\n        let companyElement = document.createElement(`a`);\r\n        let companyImage = document.createElement(`img`); // Creating Image for Each Company\r\n        // Setting the Attributes of the Company Image\r\n        companyImage.setAttribute(`src`, company);\r\n        companyImage.setAttribute(`class`, `companyIcon`);\r\n        companyImage.setAttribute(`height`, `100px`);\r\n        companyImage.setAttribute(`width`, `100px`);\r\n        companyElement.setAttribute(`href`,`./html/company.html?symbol=${company.symbol}`);\r\n        companyElement.classList.add(`companyElement`);\r\n        companyElement.setAttribute(`ìd`, index + 1);\r\n        stockElement.innerHTML = `${company.symbol} <span class=\"positive\"> | ($${company.price})</span>`;\r\n        marqueeElement.classList.add(`marqueeAnim`);\r\n        companyElement.append(stockElement)\r\n        marqueeElement.append(companyElement);\r\n    });\r\n    }\r\n\r\n    stockListFetch();\r\n    return (\r\n        <div class=\"outerMarquee marqueeAnim\">\r\n            <div class=\"newTesting\" id=\"marqueeTest\"></div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Stockbar;"]},"metadata":{},"sourceType":"module"}