{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\massa\\\\OneDrive\\\\Desktop\\\\Coding\\\\Whats-Your-Deal\\\\src\\\\components\\\\StockBar\\\\stockbar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport \"./sass/stockbar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Stockbar() {\n  _s();\n\n  const [isStockList, setIsStockList] = React.useState(false);\n\n  const isntStockList = () => {\n    setIsStockList(false);\n  };\n\n  const IsStockList = () => {\n    setIsStockList(true);\n  };\n\n  const stockBar = document.getElementById(`stockBar`);\n  let profilesArray = [];\n  fetch(`https://financialmodelingprep.com/api/v3/available-traded/list?apikey=7e60778244bbb11a3e59192e565ed625`).then(response => {\n    return response.json();\n  }).then(stockList => {\n    stockList.splice(100);\n    console.log('Stock API Data Is:');\n    console.log(stockList);\n    stockList.forEach((company, index, stockElement, companyRow) => {\n      let profileURL = `https://stock-exchange-dot-full-stack-course-services.ew.r.appspot.com/api/v3/company/profile/${company.symbol}`;\n      fetch(profileURL).then(newResponse => newResponse.json()).then(profileData => {\n        // Reinitializing Profile Array\n        profilesArray.push(profileData);\n        profilesArray.forEach((company, index) => {\n          // Begin Profiles Array // Search Results Function\n          let plus = ``;\n          let condition = ``;\n          let symbol = company.symbol;\n          let image = company.profile.image;\n          let changes = company.profile.changes.toFixed(2);\n          let name = company.profile.companyName; // Filtering for Price Increase or Decrease\n\n          if (changes >= 0) {\n            condition = `positive`;\n            plus = `+`;\n          } else {\n            condition = `negative`;\n          } // Creating Rows for Each Company\n\n\n          companyRow = document.createElement(`div`);\n          let companyImage = document.createElement(`img`); // Creating Image for Each Company\n          // Setting the Attributes of the Company Image\n\n          companyImage.setAttribute(`src`, image);\n          companyImage.setAttribute(`class`, `companyIcon`);\n          companyImage.setAttribute(`height`, `100px`);\n          companyImage.setAttribute(`width`, `100px`); // Setting the Attributes of the Company Rows\n\n          companyRow.className = `companyRow`; // Creating a New Element to Contain Company Data\n\n          let companyElement = document.createElement(`a`);\n          companyElement.setAttribute(`href`, `./html/company.html?symbol=${symbol}`);\n          companyElement.className = `çompanyElement`;\n          companyElement.setAttribute(`ìd`, index + 1);\n          companyElement.innerHTML = `\n                    <span class=\"companyName\">${name}</span> \n                    <span class=\"companySymbol\">(${symbol})</span>\n                    <span class=\"companyChanges ${condition}\">(${plus}${changes})</span>`; // Injecting the Elements we Created into the Rows\n\n          companyRow.prepend(companyImage);\n          companyRow.append(companyElement); // Returning the Company Row\n\n          return companyRow; // End Search Results Function\n        }); // Abstracted this code so it only appends rows on full word input\n\n        stockBar.append(companyRow); // Image Fixing\n\n        const images = document.querySelectorAll(`img`);\n        images.forEach(image => {\n          image.addEventListener(`error`, event => {\n            event.target.src = `../img/Stock-Icon-Circle-Icon.svg`;\n          });\n        });\n        let searchTerm = 'Hello'; // Highlighting Searched Text on Company Names\n\n        const companyNames = document.querySelectorAll(`.companyName`);\n        companyNames.forEach(name => {\n          let filteredCharacters = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n          let filter = new RegExp(`${filteredCharacters}`, `gi`);\n          name.innerHTML = name.textContent.replace(filter, match => `<mark>${match}</mark>`);\n        }); // Highlighting Searched Text on Company Symbols\n\n        const companySymbols = document.querySelectorAll(`.companySymbol`);\n        companySymbols.forEach(symbol => {\n          let filteredCharacters = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n          let filter = new RegExp(`${filteredCharacters}`, `gi`);\n          symbol.innerHTML = symbol.textContent.replace(filter, match => `<mark>${match}</mark>`);\n        });\n      });\n      stockElement = document.createElement(`div`);\n      stockElement.className = `stockElement`; // Add symbol with a price\n\n      let companyElement = document.createElement(`a`);\n      let companyImage = document.createElement(`img`); // Creating Image for Each Company\n      // Setting the Attributes of the Company Image\n\n      companyImage.setAttribute(`src`, company);\n      companyImage.setAttribute(`class`, `companyIcon`);\n      companyImage.setAttribute(`height`, `100px`);\n      companyImage.setAttribute(`width`, `100px`);\n      companyElement.setAttribute(`href`, `./html/company.html?symbol=${company.symbol}`);\n      companyElement.className = `companyElement`;\n      companyElement.setAttribute(`ìd`, index + 1);\n      stockElement.innerHTML = `${company.symbol} <span class=\"positive\"> | (${company.price})</span>`;\n      stockBar.className = `marquee`;\n      companyElement.append(stockElement);\n      stockBar.append(companyElement);\n    }); // IsStockList();\n    // IsStockList;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: IsStockList,\n    className: `stockBar container${isStockList ? \" right-panel-active\" : \"\"}`,\n    id: \"stockBar\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Stockbar, \"NrbLR32G963E1MKu91UFT8nUNpM=\");\n\n_c = Stockbar;\nexport default Stockbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stockbar\");","map":{"version":3,"sources":["C:/Users/massa/OneDrive/Desktop/Coding/Whats-Your-Deal/src/components/StockBar/stockbar.jsx"],"names":["React","Stockbar","isStockList","setIsStockList","useState","isntStockList","IsStockList","stockBar","document","getElementById","profilesArray","fetch","then","response","json","stockList","splice","console","log","forEach","company","index","stockElement","companyRow","profileURL","symbol","newResponse","profileData","push","plus","condition","image","profile","changes","toFixed","name","companyName","createElement","companyImage","setAttribute","className","companyElement","innerHTML","prepend","append","images","querySelectorAll","addEventListener","event","target","src","searchTerm","companyNames","filteredCharacters","replace","filter","RegExp","textContent","match","companySymbols","price"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport \"./sass/stockbar.css\";\r\n\r\nfunction Stockbar() {\r\n\r\n    const [isStockList, setIsStockList] = React.useState(false);\r\n\r\n    const isntStockList = () => {\r\n        setIsStockList(false);\r\n     };  \r\n     const IsStockList = () => {\r\n        setIsStockList(true);\r\n     };\r\n\r\n    const stockBar = document.getElementById(`stockBar`);\r\n    let profilesArray = [];\r\n\r\n    fetch(`https://financialmodelingprep.com/api/v3/available-traded/list?apikey=7e60778244bbb11a3e59192e565ed625`)\r\n    .then(response => {\r\n        return response.json();\r\n    }).then(stockList => {\r\n\r\n        stockList.splice(100);\r\n        console.log('Stock API Data Is:');\r\n        console.log(stockList);\r\n\r\n        stockList.forEach((company, index, stockElement, companyRow) => {\r\n            let profileURL = `https://stock-exchange-dot-full-stack-course-services.ew.r.appspot.com/api/v3/company/profile/${company.symbol}`;\r\n            fetch(profileURL)\r\n                .then((newResponse) => newResponse.json())\r\n                .then((profileData) => {\r\n\r\n                // Reinitializing Profile Array\r\n                profilesArray.push(profileData);\r\n\r\n                profilesArray.forEach((company, index) => {\r\n\r\n                    // Begin Profiles Array // Search Results Function\r\n                    let plus = ``;\r\n                    let condition = ``;\r\n                    let symbol = company.symbol;\r\n                    let image = company.profile.image;\r\n                    let changes = company.profile.changes.toFixed(2);\r\n                    let name = company.profile.companyName;\r\n\r\n                    // Filtering for Price Increase or Decrease\r\n                    if (changes >= 0) {\r\n                        condition = `positive`;\r\n                        plus = `+`;\r\n                    }  else {\r\n                        condition = `negative`;\r\n                    }\r\n            \r\n                    // Creating Rows for Each Company\r\n                    companyRow = document.createElement(`div`);\r\n                    let companyImage = document.createElement(`img`); // Creating Image for Each Company\r\n        \r\n                    // Setting the Attributes of the Company Image\r\n                    companyImage.setAttribute(`src`, image);\r\n                    companyImage.setAttribute(`class`, `companyIcon`);\r\n                    companyImage.setAttribute(`height`, `100px`);\r\n                    companyImage.setAttribute(`width`, `100px`);\r\n\r\n                    // Setting the Attributes of the Company Rows\r\n                    companyRow.className = `companyRow`;\r\n\r\n                    // Creating a New Element to Contain Company Data\r\n                    let companyElement = document.createElement(`a`);\r\n                    companyElement.setAttribute(`href`,`./html/company.html?symbol=${symbol}`);\r\n                    companyElement.className = `çompanyElement`;\r\n                    companyElement.setAttribute(`ìd`, index + 1);\r\n                    companyElement.innerHTML = `\r\n                    <span class=\"companyName\">${name}</span> \r\n                    <span class=\"companySymbol\">(${symbol})</span>\r\n                    <span class=\"companyChanges ${condition}\">(${plus}${changes})</span>`; // Injecting the Elements we Created into the Rows\r\n                    companyRow.prepend(companyImage);\r\n                    companyRow.append(companyElement);\r\n\r\n                    // Returning the Company Row\r\n                    return companyRow;\r\n                    // End Search Results Function\r\n                });\r\n\r\n                // Abstracted this code so it only appends rows on full word input\r\n                stockBar.append(companyRow);\r\n\r\n                // Image Fixing\r\n                const images = document.querySelectorAll(`img`);\r\n                images.forEach(image => {\r\n                    image.addEventListener(`error`,event => {\r\n                        event.target.src=`../img/Stock-Icon-Circle-Icon.svg`;\r\n                    })\r\n                })\r\n\r\n                let searchTerm = 'Hello';\r\n\r\n                // Highlighting Searched Text on Company Names\r\n                const companyNames = document.querySelectorAll(`.companyName`);\r\n                companyNames.forEach(name => {\r\n                let filteredCharacters = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\");\r\n                let filter = new RegExp(`${filteredCharacters}`,`gi`);\r\n                name.innerHTML = name.textContent.replace(filter,match => `<mark>${match}</mark>`);\r\n                })\r\n\r\n                // Highlighting Searched Text on Company Symbols\r\n                const companySymbols = document.querySelectorAll(`.companySymbol`);\r\n                companySymbols.forEach(symbol => {\r\n                let filteredCharacters = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\");\r\n                let filter = new RegExp(`${filteredCharacters}`,`gi`);\r\n                symbol.innerHTML = symbol.textContent.replace(filter,match => `<mark>${match}</mark>`);\r\n                })\r\n\r\n            });\r\n\r\n            stockElement = document.createElement(`div`);\r\n            stockElement.className = `stockElement`;\r\n            // Add symbol with a price\r\n            let companyElement = document.createElement(`a`);\r\n            let companyImage = document.createElement(`img`); // Creating Image for Each Company\r\n            // Setting the Attributes of the Company Image\r\n            companyImage.setAttribute(`src`, company);\r\n            companyImage.setAttribute(`class`, `companyIcon`);\r\n            companyImage.setAttribute(`height`, `100px`);\r\n            companyImage.setAttribute(`width`, `100px`);\r\n            companyElement.setAttribute(`href`,`./html/company.html?symbol=${company.symbol}`);\r\n            companyElement.className = `companyElement`;\r\n            companyElement.setAttribute(`ìd`, index + 1);\r\n            stockElement.innerHTML = `${company.symbol} <span class=\"positive\"> | (${company.price})</span>`;\r\n            stockBar.className = `marquee`;\r\n            companyElement.append(stockElement);\r\n            stockBar.append(companyElement);\r\n        });\r\n\r\n        // IsStockList();\r\n        // IsStockList;\r\n\r\n    })\r\n\r\n    return (\r\n        <div onClick={IsStockList} className={`stockBar container${isStockList ? \" right-panel-active\" : \"\"}`} id=\"stockBar\"></div>\r\n    );\r\n}\r\n \r\nexport default Stockbar;"]},"metadata":{},"sourceType":"module"}